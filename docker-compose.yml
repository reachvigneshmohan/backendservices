version: "1.0.0"
services:
  client-gateway-service:
    build:
      context: ./client-gateway-service
      dockerfile: Dockerfile.dev
    ports:
      - "1000:1000"
    volumes:
      - ./client-gateway-service:/usr/src/app
      - ./protos:/usr/src/app/protos
    networks:
      - server-network           
  device-gateway-server:
    build:
      context: ./device-gateway-server
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
      - "5001:5001"
    volumes:
      - ./device-gateway-server:/usr/src/app
    networks:
      - server-network           
  rawdata-parsing-service:
    build:
      context: ./rawdata-parsing-service
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./rawdata-parsing-service:/usr/src/app
    networks:
      - server-network
  data-normalization-service:
    build:
      context: ./data-normalization-service
      dockerfile: Dockerfile.dev
    ports:
      - "3002:3002"
    volumes:
      - ./data-normalization-service:/usr/src/app
    networks:
      - server-network
  device-command-center-service:
    build:
      context: ./device-command-center-service
      dockerfile: Dockerfile.dev
    ports:
      - "3003:3003"
    volumes:
      - ./device-command-center-service:/usr/src/app
    networks:
      - server-network               
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile.dev
    ports:
      - "3004:3004"
      - "50051:50051"
    volumes:
      - ./auth-service:/usr/src/app
      - ./protos:/usr/src/app/protos
    networks:
      - server-network                               
  device-management-service:
    build:
      context: ./device-management-service
      dockerfile: Dockerfile.dev
    ports:
      - "3006:3006"
    volumes:
      - ./device-management-service:/usr/src/app
    networks:
      - server-network
  asset-management-service:
    build:
      context: ./asset-management-service
      dockerfile: Dockerfile.dev
    ports:
      - "3007:3007"
      - "50052:50052"
    volumes:
      - ./asset-management-service:/usr/src/app
      - ./protos:/usr/src/app/protos
    networks:
      - server-network       
  driver-management-service:
    build:
      context: ./driver-management-service
      dockerfile: Dockerfile.dev
    ports:
      - "3008:3008"
    volumes:
      - ./driver-management-service:/usr/src/app
    networks:
      - server-network       
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile.dev
    ports:
      - "3009:3009"
    volumes:
      - ./notification-service:/usr/src/app
    networks:
      - server-network
  alert-management-service:
    build:
      context: ./alert-management-service
      dockerfile: Dockerfile.dev
    ports:
      - "3010:3010"
    volumes:
      - ./alert-management-service:/usr/src/app
    networks:
      - server-network
  geofencing-service:
    build:
      context: ./geofencing-service
      dockerfile: Dockerfile.dev
    ports:
      - "3011:3011"
    volumes:
      - ./geofencing-service:/usr/src/app
    networks:
      - server-network
  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile.dev
    ports:
      - "3012:3012"
    volumes:
      - ./analytics-service:/usr/src/app
    networks:
      - server-network              
  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile.dev
    ports:
      - "3013:3013"
    volumes:
      - ./billing-service:/usr/src/app
    networks:
      - server-network                
  timescaledb:
    image: timescale/timescaledb:latest-pg12
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=timescaledb
      - POSTGRES_USER=your_user
      - POSTGRES_PASSWORD=your_password
    networks:
      - server-network
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    networks:
      - server-network
    volumes:
      - mongodb_data:/data/db
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - server-network
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - server-network
    depends_on:
      - zookeeper
  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    networks:
      - server-network
  kong-database:
    image: postgres:9.6
    restart: always
    ports:
      - "5444:5444"
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    networks:
      - server-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - kong-database:/var/lib/postgresql/data
  kong-migrations:
    image: kong:latest
    command: kong migrations up
    restart: on-failure
    environment:
      - KONG_PG_HOST=kong-database
      - KONG_DATABASE=postgres
      - KONG_PG_PASSWORD=kong
    links:
      - kong-database
    depends_on:
      - kong-database
    networks:
      - server-network
  kong:
    image: kong:latest
    restart: always
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
      - "9000:9000"
      - "9443:9443"
      - "9001:9001"
      - "9002:9002"
      - "9080:9080"  # HTTP/2 proxy port
      - "9081:9081"  # Secure HTTP/2 proxy port
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: 0.0.0.0:9000, 0.0.0.0:9080 http2
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:9443, 0.0.0.0:9081 http2 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:9001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:9002
    networks:
      - server-network
    depends_on:
      - kong-migrations
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./protos:/usr/local/kong/proto
      # - ./kong.conf/kong.conf:/etc/kong/kong.conf
      - ./kong.yml/kong.yml:/kong/declarative/kong.yml
      # - ./kong-plugins:/usr/local/share/lua/5.1/kong/plugins
networks:
  server-network:
    external: true
volumes:
  mongodb_data:
  timescaledb-data:
  kafka-data:
  redis-data:
  kong-database:
